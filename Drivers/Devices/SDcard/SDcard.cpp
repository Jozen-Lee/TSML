/**
  ******************************************************************************
  * Copyright (c) 2019 - ~, SCUT-RobotLab Development Team
  * @file    SDcard.cpp
  * @author  LJY 2250017028@qq.com
  * @brief   Code for SDcard.
  * @date    2020-12-05
  * @version 2.0
  * @par Change Log:
  * <table>
  * <tr><th>Date        <th>Version  <th>Author         <th>Description
  * <tr><td>2020-08-11  <td>1.0      <td>YDX            <td>Creator
	*	<tr><td>2020-12-05	<td>2.0			 <td>LJY						<td>Increase the function of saving bmp photos
  * </table>
  *
  ==============================================================================
                            How to use this driver
  ==============================================================================
    @note
	  -# Use SDcard to save bmp photos
		task()
	  {
	      if(SD_File_Init(Newfnum/Fixedfnum) == 0) {//success}      	      
	      for(;;)
	      {
             SD_File_Save_Photo(addr,COL,ROW,Newfnum/Fixedfnum);
        }
    }
    @warning
    -# please confirm SD_File_Init function returns 0 first!  
	  -# this file needs codes generated by cubemx. 	
		
  ******************************************************************************
  * @attention
  * 
  * if you had modified this file, please make sure your code does not have many 
  * bugs, update the version Number, write dowm your name and the date, the most
  * important is make sure the users will have clear and definite understanding 
  * through your new brief.
  *
  * <h2><center>&copy; Copyright (c) 2019 - ~, SCUT-RobotLab Development Team.
  * All rights reserved.</center></h2>
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "SDcard.h"

/* Private define ------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
SD_CARD SDcard;

/* Private type --------------------------------------------------------------*/
/* Private function declarations ---------------------------------------------*/
/* function prototypes -------------------------------------------------------*/
const char * Get_Type(FILE_TYPE type)
{
	switch(type)
	{
		case _BMP: return "bmp";
		case _JPG: return "jpg";
		case _TXT: return "txt";
		case _CSV: return "csv";
	}
	return NULL;
}
/**
  * @brief  SD卡的初始化
	* @param void 
  * @return 0 success
  *         1 fail
  */
uint8_t SD_CARD::Init(void)
{        
	
  /* 注册一个磁盘工作区 */
	rc = f_mount(&fatfs, "0:", 1);
		
	if(rc == FR_OK) return 0;
	else return 1;
}

/**
  * @brief  在指定路径创建文件夹, 若已存在则创建失败
	* @param[in] addr 目标路径
	* @param[in] name 文件夹名称
  * @return Path_Name success
  *         NULL fail
  */
const TCHAR* SD_CARD::Mkdir(const TCHAR* addr, const TCHAR* name)
{       
	/* 生成完整路径 */
	sprintf(Path_Name, "%s%s%n", addr, name, (int *)MAX_SIZE);
	rc = f_mkdir(Path_Name);
	
	if(rc == FR_OK || rc == FR_EXIST) 
	{
		return Path_Name;
	}
	else return NULL;
}

/**
  * @brief  在指定路径创建文件夹, 若已存在则文件名尾缀递增, 直至成功
	* @param[in] addr 目标路径
	* @param[in] name 文件夹名称
  * @return Path_Name success
  *         NULL fail
  */
const TCHAR* SD_CARD::Inc_Mkdir(const TCHAR* addr, const TCHAR* name)
{    
	uint16_t count = 0;
  /* 生成完整路径 */
	do
	{
		sprintf(Path_Name, "%s%s_%d%n", addr, name, count, (int *)MAX_SIZE);
		rc = f_mkdir(Path_Name);
		count ++;
	} while(rc == FR_EXIST);
	
	if(rc == FR_OK) 
	{
		return Path_Name;
	}
	else return NULL;
}

/**
  * @brief  不覆盖式地写入数据到SD卡
	* @param[in] addr 目标文件夹
  * @param[in] name 目标文件名, 如不存在, 则创建新的文件
  * @param[in] buffer 要写入的数据
	* @param[in] len 要写入的数据长度
  * @return 0 success
  *         1 fail
  */
uint8_t SD_CARD::Write(const char* addr , const TCHAR* name, uint8_t* buffer, uint16_t len)
{
	uint8_t res;
	
	/* 生成文件路径 */
	sprintf(Path_Name, "%s%s%n", addr, name, (int *)MAX_SIZE);
	
	/* 打开文件, 并指向文件尾	*/
	res = f_open(&fil, Path_Name, FA_WRITE | FA_OPEN_APPEND); 
	if(res == FR_OK)
	{
		/* 写入数据 */
		res = f_write(&fil, buffer, len, &bw);	
		f_close(&fil);
		if(res == FR_OK) return 0;
		else return 1;
	}
	else
	{
		f_close(&fil);
		return 1;
	}
			
}

/**
  * @brief  不覆盖式地写入数据到SD卡
	* @param[in] addr 目标文件夹
  * @param[in] name 目标文件名
  * @param[in] buffer 要写入的数据
	* @param[in] len 要写入的数据长度
  * @return 0 success
  *         1 fail
  */
uint8_t SD_CARD::Write_Cover(const char* addr , const TCHAR* name, uint8_t* buffer, uint16_t len)
{
	uint8_t res;
	
	/* 生成文件路径 */
	sprintf(Path_Name, "%s%s%n", addr, name, (int *)MAX_SIZE);
	
	/* 打开文件 */
	res = f_open(&fil, Path_Name, FA_WRITE | FA_CREATE_ALWAYS); 	
	
	if(res == FR_OK)
	{
		/* 写入数据 */
		res = f_write(&fil, buffer, len, &bw);	
		f_close(&fil);
		if(res == FR_OK) return 0;
		else return 1;
	}
	else
	{
		f_close(&fil);
		return 1;
	}	
}

/**
  * @brief  读取SD卡的数据
	* @param[in] addr 目标文件夹
  * @param[in] name 目标文件名
  * @param[in] buffer 读取数据的缓存
	* @param[in] offset 指针偏移量
	* @param[in] len 要读取的数据长度
  * @return 0 success
  *         1 fail
  */
uint8_t SD_CARD::Read(const TCHAR* addr, const TCHAR* name, uint8_t* buffer, uint32_t offset, uint16_t len)
{
	uint8_t res;
	
	/* 生成文件路径 */
	sprintf(Path_Name, "%s%s%n", addr, name, (int *)MAX_SIZE);
	
	/* 打开文件 */
	res = f_open(&fil, Path_Name, FA_READ); 

	/* 文件指针指向指定位置 */
	f_lseek(&fil, offset);
	
	if(res == FR_OK)
	{
		/* 写入数据 */
		res = f_read(&fil, buffer, len, &bw);	
		f_close(&fil);
		if(res == FR_OK) return 0;
		else return 1;
	}
	else
	{
		f_close(&fil);
		return 1;
	}	
}

/**
  * @brief  BMP参数配置
	* @param[in] width 图像宽度
  * @param[in] height 图像高度
  * @return void
  */
BMP_CONFIG::BMP_CONFIG(long height, long width)
{
	uint32_t bmpheadsize;																//bmp头大小	   		 
	bmpheadsize=sizeof(hbmp);														//得到bmp文件头的大小   
	memset((uint8_t*)&hbmp,0,sizeof(hbmp));							//置零空申请到的内存.	
	
 	/*构造灰度图的信息头*/			   
	hbmp.bmiHeader.biSize = sizeof(INFO_HEADER);				//信息头大小
	hbmp.bmiHeader.biWidth = width;	 										//bmp的宽度
	hbmp.bmiHeader.biHeight = height; 									//bmp的高度
	hbmp.bmiHeader.biPlanes = 1;	 											//恒为1
	hbmp.bmiHeader.biBitCount = 8;	 										//bmp为8位色bmp
	hbmp.bmiHeader.biCompression = BI_RGB;							//配置压缩格式为不压缩
	hbmp.bmiHeader.biSizeImage = hbmp.bmiHeader.biHeight*hbmp.bmiHeader.biWidth*hbmp.bmiHeader.biBitCount/8;//bmp数据区大小
	hbmp.bmiHeader.biClrImportant = 0;
	hbmp.bmiHeader.biClrUsed = 0;
	hbmp.bmiHeader.biXPelsPerMeter = 0;
	hbmp.bmiHeader.biYPelsPerMeter = 0;
 		
	/*构造灰度图的文件头*/
	hbmp.bmfHeader.bfOffBits=bmpheadsize;															// 到数据区的偏移
	hbmp.bmfHeader.bfType=((uint16_t)'M'<<8)+'B';											// BM格式标志
	hbmp.bmfHeader.bfSize=bmpheadsize+hbmp.bmiHeader.biSizeImage;			// 整个bmp的大小	
	
	/* 构造灰度图调色板 */
	for(int i = 0; i < 256; i++)
	{
			hbmp.Colors[i].Blue = i;
			hbmp.Colors[i].Green = i;
			hbmp.Colors[i].Red = i;
			hbmp.Colors[i].Reserved = 0;
   } 
}

/************************ COPYRIGHT(C) SCUT-ROBOTLAB **************************/
